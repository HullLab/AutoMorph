#!/usr/bin/env python

import subprocess
import numpy as np
import sys
import glob
import os
import cv2

settings = {
            'distance_to_first_plane': 915.0,
            'distance_between_planes': 0.9,
            'pixel_size_x': 0.05,
            'pixel_size_y': 0.057,
            'file_extension': 'jpg'
            }


def scale(input_directory):

    planes = list_files(input_directory, settings['file_extension'])
    os.chdir(input_directory)

    for i_plane, plane in enumerate(planes):

        print plane
        _, plane = os.path.split(plane)

        if i_plane == 0:
            command = ['identify', '-ping', plane]
            original_size_str = subprocess.check_output(command).split()[2]
            original_size = original_size_str.split('x')
            original_size = np.array([float(original_size[0]), float(original_size[1])])

            image1 = cv2.imread(plane)

        else:
            ratio = settings['distance_to_first_plane'] / ((settings['distance_between_planes'] * i_plane) +
                                                           settings['distance_to_first_plane'])
            resize_str = str(ratio*100)+'%'

            command = ['convert', plane, '-resize', resize_str, 'scaled_'+plane]

            subprocess.call(command)

    for plane in planes[1:]:
        print plane
        _, plane = os.path.split(plane)

        image2 = cv2.imread('scaled_'+plane)

        result = cv2.matchTemplate(image1, image2, cv2.TM_CCOEFF_NORMED)
        offset = np.unravel_index(result.argmax(), result.shape)
        offset_str = '+'+str(offset[1])+'+'+str(offset[0])

        command = ['convert', '-size', original_size_str, 'xc: black',
                   '-page', offset_str, 'scaled_'+plane,
                   '-layers', 'flatten', 'final_'+plane]

        subprocess.call(command)


def list_files(directory, file_extension):
    '''
    This function takes a directory and returns a list of all images in that
    directory
    '''

    file_list = glob.glob(directory+os.sep+"*."+file_extension)

    print 'INFO: images.find() found %d files' % len(file_list)

    return sorted(file_list)


if __name__ == "__main__":

    if len(sys.argv) == 2:
        scale(sys.argv[1])

    else:
        print 'Usage: scale <input_directory>'
        sys.exit('Error: incorrect usage')
