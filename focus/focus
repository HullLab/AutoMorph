#!/usr/bin/python

import sys
import os
import pwd
import glob
import subprocess
import shutil
import tarfile
import platform

# Set up some global variables for easy changing on other installs:
zereneDir = '/hull-disk1/ph269/software/ZereneStacker/current'
systemMemoryMB = '96000'
tmpDir = '/tmp'
headless='xvfb-run --auto-servernum --server-num=1 '

if platform.system() == 'Darwin':
	print 'Configuring for Mac OS X'
	# Set up the Zerene Variables for Mac OS X:
	zereneJava = '/usr/bin/java'
	zereneJavaOptions = " -Xmx{0}m -Djava.io.tmpdir={1}".format(systemMemoryMB, os.path.join(tmpDir, pwd.getpwuid(os.getuid()).pw_name)+'_ZereneStacker')
	zereneJavaExtensions = [ 'jai_codec.jar', 'jai_core.jar', 'jai_imageio.jar', 'jdom.jar', 'metadata-extractor-2.4.0-beta-1.jar' ]
	zereneClassPath = ' -classpath ' + os.path.join(zereneDir, 'Contents/Resources/Java', 'ZereneStacker.jar')
	for extension in zereneJavaExtensions:
		zereneClassPath = zereneClassPath + ':' + os.path.join(zereneDir, 'Contents/Resources/Java', extension)

	zereneOptions = " com.zerenesystems.stacker.gui.MainFrame -exitOnBatchScriptCompletion -noSplashScreen -runMinimized -showProgressWhenMinimized=false  -batchScript "
	zereneCommand = headless + zereneJava + zereneJavaOptions + zereneClassPath + zereneOptions

else:
  	# Set up the Zerene Variables for Linux:
	print 'Configuring for Linux'
	zereneJava = os.path.join(zereneDir, 'jre', 'bin', 'java')
	zereneJavaOptions = " -Xmx{0}m -Djava.io.tmpdir={1}".format(systemMemoryMB, os.path.join(tmpDir, pwd.getpwuid(os.getuid()).pw_name)+'_ZereneStacker')
	zereneJavaExtensions = [ 'AppleShell.jar', 'jai_codec.jar', 'jai_core.jar', 'jai_imageio.jar', 'jdom.jar', 'metadata-extractor-2.4.0-beta-1.jar' ]
	zereneClassPath = ' -classpath ' + os.path.join(zereneDir, 'ZereneStacker.jar')
	for extension in zereneJavaExtensions:
		zereneClassPath = zereneClassPath + ':' + os.path.join(zereneDir, 'JREextensions', extension)

	zereneOptions = " com.zerenesystems.stacker.gui.MainFrame -exitOnBatchScriptCompletion -noSplashScreen -runMinimized -showProgressWhenMinimized=false  -batchScript "
	zereneCommand = headless + zereneJava + zereneJavaOptions + zereneClassPath + zereneOptions

# If we aren't being called with a single option (plus our executable), quit:
debug = False
if len(sys.argv) != 2 :
    if len(sys.argv) == 3 :
        debug = True

    else :
        print 'Use: focus <directory name>'
        print 'To preserve original files, use: focus <directory name> debug'
        sys.exit

# If that option isn't a directory name, quite:
if not os.path.isdir(sys.argv[1]) :
	print 'Argument to focus must be a directory name - quitting.'
	sys.exit

# Assign our target directory variable:
targetdir = os.path.realpath(sys.argv[1])
print 'target dir = ', targetdir

# Assign our ID variable:
ID = os.path.basename(os.path.normpath(targetdir))[0:9]
print 'ID = ', ID

if debug :
    print "Backing up unprocessed image to orginals directory..."
    orig_dir = os.path.join(targetdir, 'originals')
    if os.path.exists(orig_dir) :
        print "Error: originals directory, please remove before proceeding."
        sys.exit

    shutil.copytree(targetdir, orig_dir)

# Step 1 - Create a 'stripped' directory:
strippeddir = os.path.join(targetdir, 'stripped')
if not os.path.exists(strippeddir) :
	os.makedirs(strippeddir)

# Step 2 - strip labels from images:
objectdirs = [os.path.realpath(x) for x in glob.glob(os.path.join(targetdir, '*_obj*'))]

print 'Stripping labels from', len(objectdirs), 'images..'
for object in objectdirs:
	currentdir = os.path.join(strippeddir, os.path.basename(object))
	if not os.path.exists(currentdir):
		os.makedirs(currentdir)
	
	print 'Converting', os.path.basename(object)
	files = [os.path.realpath(x) for x in glob.glob(os.path.join(object, '*plane*tif'))]
	for infile in files:
		# It'd be nice to use the ImageMagick API here,.. but it doesn't
		# yet work, so we're using a system call instead:
		fname = os.path.splitext(os.path.basename(infile))[0]+".jpg"
		outfile = os.path.join(targetdir, 'stripped', os.path.basename(object), fname)
		convertCommand = 'convert ' + infile + ' -crop +0-160 +repage ' + outfile
		subprocess.call(convertCommand, shell=True)
		
print 'Stripping labels complete.'


# Step 3 - Initialize the batch XML file parts:
batchxml_header = """<?xml version="1.0" encoding="UTF-8"?>
<ZereneStackerBatchScript>
  <WrittenBy value="Zerene Stacker 1.04 Build T201404082055" />
	  <BatchQueue>
		    <Batches length="{0}">
""".format(len(objectdirs))

batchxml_object = """
<Batch>
        <Sources length="1">
          <Source value="{0}" />
        </Sources>
        <ProjectDispositionCode value="101" />
        <Tasks length="1">
          <Task>
            <OutputImageDispositionCode value="2" />
            <OutputImagesDesignatedFolder value="{1}/focused/" />
            <Preferences>
              <AcquisitionSequencer.BacklashMillimeters value="0.22" />
              <AcquisitionSequencer.CommandLogging value="false" />
              <AcquisitionSequencer.DistancePerStepperRotation value="1.5875" />
              <AcquisitionSequencer.MaximumMmPerSecond value="2.0" />
              <AcquisitionSequencer.MicrostepsPerRotation value="3200" />
              <AcquisitionSequencer.MovementRampTime value="2.0" />
              <AcquisitionSequencer.NumberOfSteps value="5" />
              <AcquisitionSequencer.PrecisionThreshold value="0.05" />
              <AcquisitionSequencer.PrerunMillimeters value="0.0" />
              <AcquisitionSequencer.RPPIndicatorLeft value="-100.0" />
              <AcquisitionSequencer.RPPIndicatorRight value="+100.0" />
              <AcquisitionSequencer.SettlingTime value="3.0" />
              <AcquisitionSequencer.ShutterActivationsPerStep value="1" />
              <AcquisitionSequencer.ShutterAfterTime value="2.0" />
              <AcquisitionSequencer.ShutterBetweenTime value="1.0" />
              <AcquisitionSequencer.ShutterPulseTime value="0.3" />
              <AcquisitionSequencer.StepSize value="0.1" />
              <AcquisitionSequencer.StepSizeAdjustmentFactor value="1.0" />
              <AcquisitionSequencer.StepSizesFile value="" />
              <AlignmentControl.AddNewFilesAsAlreadyAligned value="false" />
              <AlignmentControl.AlignmentSettingsChanged value="false" />
              <AlignmentControl.AllowRotation value="false" />
              <AlignmentControl.AllowScale value="false" />
              <AlignmentControl.AllowShiftX value="false" />
              <AlignmentControl.AllowShiftY value="false" />
              <AlignmentControl.BrightnessSettingsChanged value="false" />
              <AlignmentControl.CorrectBrightness value="false" />
              <AlignmentControl.MaxRelDegRotation value="20" />
              <AlignmentControl.MaxRelPctScale value="20" />
              <AlignmentControl.MaxRelPctShiftX value="20" />
              <AlignmentControl.MaxRelPctShiftY value="20" />
              <AlignmentControl.Order.Automatic value="true" />
              <AlignmentControl.Order.NarrowFirst value="true" />
              <AllowReporting.UsageStatistics value="false" />
              <ColorManagement.DebugPrintProfile value="false" />
              <ColorManagement.InputOption value="Use_EXIF_and_DCF_rules" />
              <ColorManagement.InputOption.AssumedProfile value="sRGB IEC61966-2.1" />
              <ColorManagement.ManageZSDisplays value="false" />
              <ColorManagement.ManageZSDisplaysHasChanged value="false" />
              <ColorManagement.OutputOption value="CopyInput" />
              <DepthMapControl.AlgorithmIdentifier value="1" />
              <DepthMapControl.ContrastThresholdLevel value="0" />
              <DepthMapControl.ContrastThresholdPercentile value="25.0" />
              <DepthMapControl.EstimationRadius value="10" />
              <DepthMapControl.SaveDepthMapImage value="false" />
              <DepthMapControl.SaveDepthMapImageDirectory value="" />
              <DepthMapControl.SaveUsedPixelImages value="false" />
              <DepthMapControl.SmoothingRadius value="5" />
              <DepthMapControl.UseFixedContrastThresholdLevel value="false" />
              <DepthMapControl.UseFixedContrastThresholdPercentile value="true" />
              <DepthMapControl.UsedPixelFractionThreshold value="0.5" />
              <FileIO.UseExternalTIFFReader value="false" />
              <Interpolator.RenderingSelection value="Interpolator.Spline4x4" />
              <Interpolator.ShowAdvanced value="false" />
              <LightroomPlugin.CurrentInstallationFolder value="" />
              <LightroomPlugin.DefaultColorSpace value="AdobeRGB" />
              <OutputImageNaming.Template value="ZS" />
              <Precrop.LimitsString value="" />
              <Precrop.Selected value="false" />
              <Prerotation.Degrees value="0" />
              <Prerotation.Selected value="false" />
              <Presize.UserSetting.Scale value="1.0" />
              <Presize.UserSetting.Selected value="false" />
              <Presize.Working.Scale value="1.0" />
              <PyramidControl.GritSuppressionMethod value="1" />
              <PyramidControl.RetainUDRImage value="false" />
              <RetouchingBrush.Hardness value="0.5" />
              <RetouchingBrush.ShowBrushes value="false" />
              <RetouchingBrush.Type value="Details" />
              <RetouchingBrush.Width value="10" />
              <SaveImage.BitsPerColor value="8" />
              <SaveImage.CompressionQuality value="1.00" />
              <SaveImage.FileType value="tif" />
              <SaveImage.RescaleImageToAvoidOverflow value="false" />
              <SkewSequence.FirstImage.MaximumShiftXPct value="-3.0" />
              <SkewSequence.FirstImage.MaximumShiftYPct value="0.0" />
              <SkewSequence.LastImage.MaximumShiftXPct value="3.0" />
              <SkewSequence.LastImage.MaximumShiftYPct value="0.0" />
              <SkewSequence.NumberOfOutputImages value="3" />
              <SkewSequence.Selected value="false" />
              <StackingControl.FrameSkipFactor value="1" />
              <StackingControl.FrameSkipSelected value="false" />
              <StereoOrdering.LeftRightIndexSeparation value="1" />
              <WatchDirectoryOptions.AcceptViaDelay value="false" />
              <WatchDirectoryOptions.AcceptViaDelaySeconds value="2.0" />
            </Preferences>
            <TaskIndicatorCode value="2" />
          </Task>
        </Tasks>
      </Batch>
"""

batchxml_footer = """
    </Batches>
  </BatchQueue>
</ZereneStackerBatchScript>
"""

# Step 4: Loop over all object directories and write the ZereneStacker batch XML file:
with open(os.path.join(targetdir, 'zsbatch.xml'), 'w') as zsbatch:
	zsbatch.write(batchxml_header)

	print 'stripppeddir = ', strippeddir

	dirs = [os.path.realpath(x) for x in glob.glob(os.path.join(strippeddir, '*_obj*'))]
	for object in dirs:
		print 'Adding object: ', object
		zsbatch.write(batchxml_object.format(object, targetdir))

	zsbatch.write(batchxml_footer)
	print 'Batch XML file written.'

# Step 5: Run the XML file:
zereneCommand = zereneCommand + ' ' + os.path.join(targetdir, 'zsbatch.xml') + ' > ' + os.path.join(targetdir, 'zerene.log') 
print 'Running Zerene Stacker : ', zereneCommand
#print 'Running Zerene Stacker..'
subprocess.call(zereneCommand, shell=True)
print 'Zerene Stacker finished!'

# Step 6: Combine focused image with label:
print  'Re-labeling images ...'
focuseddir = os.path.join(targetdir, 'focused')
if not os.path.exists(focuseddir) :
	os.makedirs(focuseddir)

focuseddir2 = os.path.join(targetdir, 'focused_unlabeled')
if not os.path.exists(focuseddir2) :
	os.makedirs(focuseddir2)

dirs = [os.path.realpath(x) for x in glob.glob(os.path.join(targetdir, '*_obj*'))]
for dir in dirs:
	print 'Processing: ', dir
	labeldir = dir
	focusedfname = os.path.basename(dir)+".tif"
	edffname = os.path.basename(dir)+"_edf.jpg"

	highestfile = os.path.realpath(sorted(glob.glob(os.path.join(dir, '*plane*tif')))[-1])
	labelfile = os.path.realpath(os.path.join(labeldir, 'label.tif'))
	zsfile = os.path.realpath(os.path.join(strippeddir, os.path.basename(dir), 'ZS.tif'))
	edffile = os.path.realpath(os.path.join(focuseddir, edffname))
	unlabeledfile = os.path.realpath(os.path.join(focuseddir2, focusedfname))

	# Grab the label:
	#	convert ${HIGHEST} -gravity South -crop 0x160+0+0 ${TARGETDIR}/stripped/${LABELDIR}/label.tif
	#convertCommand = 'convert ' + highestfile + ' -gravity South -crop 0x160+0+0 ' + labelfile
	convertCommand = "convert {0} -gravity South -crop 0x160+0+0 {1}".format(highestfile, labelfile)
	subprocess.call(convertCommand, shell=True)

	# 
	#	convert ${TARGETDIR}/stripped/${LABELDIR}/label.tif -fill white -stroke white -draw "path 'M 0,143 l 99999,0 l 0,20 l -99999,0 '" ${TARGETDIR}/stripped/${LABELDIR}/label.tif
	#convertCommand = 'convert ' + labelfile + ' -fill white -stroke white -draw "path 'M 0,143 l 99999,0 l 0,20 l -99999,0 '"  
	convertCommand = """convert {0} -fill white -stroke white -draw "path 'M 0,143 l 99999,0 l 0,20 l -99999,0 '" {1} """.format(labelfile, labelfile)
	subprocess.call(convertCommand, shell=True)

	# 
	#	convert -append ${TARGETDIR}/stripped/${LABELDIR}/ZS.tif ${TARGETDIR}/stripped/${LABELDIR}/label.tif ${TARGETDIR}/focused/${FOCUSEDFILE}_edf.jpg
	convertCommand = "convert -append {0} {1} {2}".format(zsfile, labelfile, edffile)
	subprocess.call(convertCommand, shell=True)

	#
	#	#convert ${TARGETDIR}/stripped/${LABELDIR}/ZS.tif ${TARGETDIR}/focused_unlabeled/${FOCUSEDFILE}.tif
	convertCommand = "convert {0} {1}".format(zsfile, unlabeledfile)
	subprocess.call(convertCommand, shell=True)
	#shutil.copyfile(zsfile, unlabeledfile)

# Step 7: Clean up
# NEW: tar up the focused directory:
print ' Archiving focused images .. '

tarfilename = os.path.join(os.path.dirname(targetdir), ID+'-focused.tar')
tar = tarfile.open(tarfilename, 'w:gz')
tar.add(focuseddir)
tar.close()

# Z-stacks:
zdir = os.path.join(targetdir, 'z.stacks')
if not os.path.exists(zdir) :
	os.makedirs(zdir)

dirs = [os.path.realpath(x) for x in glob.glob(os.path.join(targetdir, '*_obj*'))]
for dir in dirs:
	shutil.move(dir, zdir)

tarfilename = os.path.join(os.path.dirname(targetdir), ID+'-z.stacks.tar')
tar = tarfile.open(tarfilename, 'w:gz')
tar.add(zdir)
tar.close()

print 'Done!'
