#!/usr/bin/env python

import ConfigParser
import sys
import os
import pwd
import glob
import subprocess
import shutil
import tarfile

import zerene


def focus(directories):

    # Assign our ID variable:
    ID = os.path.basename(os.path.normpath(directories['input']))[0:9]
    print 'ID = ', ID

    if debug:
        print 'Backing up unprocessed image to originals directory...'
        orig_dir = os.path.join(directories['input'], 'originals')
        if os.path.exists(orig_dir):
            sys.exit("Error: originals directory already exists, please remove before proceeding.")

        focus_dir = os.path.join(directories['input'], 'focused')
        if os.path.exists(focus_dir):
            sys.exit("Error: this directory has already been focused, please clean out before proceeding.")

        shutil.copytree(directories['input'], orig_dir)

    # SETTING UP DIRECTORIES
    directories['objects'] = [os.path.realpath(x) for x in glob.glob(os.path.join(directories['input'], '*_obj*'))]

    directories['stripped'] = os.path.join(directories['input'], 'stripped')
    if not os.path.exists(directories['stripped']):
        os.makedirs(directories['stripped'])

    directories['unlabeled_focused'] = os.path.join(directories['input'], 'focused_unlabeled')
    if not os.path.exists(directories['unlabeled_focused']):
        os.makedirs(directories['unlabeled_focused'])

    directories['final_focused'] = os.path.join(directories['input'], 'focused')
    if not os.path.exists(directories['final_focused']):
        os.makedirs(directories['final_focused'])

    directories['zstack'] = os.path.join(directories['input'], 'z.stacks')
    if not os.path.exists(directories['zstack']):
        os.makedirs(directories['zstack'])

    # STRIPPING LABELS
    print 'Stripping labels from', len(directories['objects']), 'images..'
    strip_labels(directories)
    print 'Stripping labels complete.'

    # RUNNING EXTERNAL SOFTWARE
    if software['name'] == "zerene":

        # Initialize the batch XML file
        zerene.write_batchfile(directories['objects'])

        # Run the XML file
        zerene_command = zerene.construct_command(software)
        zerene_command += ' %s > %s' % (os.path.join(directories['input'], 'zsbatch.xml'),
                                        os.path.join(directories['input'], 'zerene.log'))
        print 'Running Zerene Stacker: ', zerene_command

        subprocess.call(zerene_command, shell=True)

        print 'Zerene Stacker finished!'

    # ADD BACK LABELS
    print 'Re-labeling images ...'
    add_labels(directories)

    # ARCHIVE
    print 'Archiving focused images ... '

    for object_dir in directories['objects']:
        shutil.move(object_dir, directories['zstack'])

    # Final Images
    archive(ID+'-focused.tar', directories['final_focused'], directories)

    # Z-stacks (Original Segmented Images?)
    archive(ID+'-z.stacks.tar', directories['zstack'], directories)


def archive(tar_filename, dir_to_tar, directories):

    tar_filename = os.path.join(os.path.dirname(directories['input']), tar_filename)
    tar = tarfile.open(tar_filename, 'w:gz')
    tar.add(dir_to_tar)
    tar.close()


def strip_labels(directories):

    for object in directories['objects']:
        currentdir = os.path.join(directories['stripped'], os.path.basename(object))
        if not os.path.exists(currentdir):
            os.makedirs(currentdir)

        print 'Cropping ', os.path.basename(object)
        files = [os.path.realpath(x) for x in glob.glob(os.path.join(object, '*plane*tif'))]
        for infile in files:
            # It'd be nice to use the ImageMagick API here,.. but it doesn't
            # yet work, so we're using a system call instead:
            fname = os.path.splitext(os.path.basename(infile))[0]+".jpg"
            outfile = os.path.join(directories['input'], 'stripped', os.path.basename(object), fname)
            convert_command = 'convert ' + infile + ' -crop +0-160 +repage ' + outfile
            subprocess.call(convert_command, shell=True)


def add_labels(directories):

    for object_dir in directories['objects']:
        print 'Adding labels to ', object_dir

        object_name = os.path.basename(object_dir)
        top_file = os.path.realpath(sorted(glob.glob(os.path.join(object_dir, '*plane*tif')))[-1])

        # Grab the label:
        label_file = os.path.realpath(os.path.join(object_dir, 'label.tif'))
        #   convert ${HIGHEST} -gravity South -crop 0x160+0+0 ${directories['input']}/stripped/${label_dir}/label.tif
        # convert_command = 'convert ' + top_file + ' -gravity South -crop 0x160+0+0 ' + label_file
        convert_command = "convert %s -gravity South -crop 0x160+0+0 %s" % (top_file, label_file)
        subprocess.call(convert_command, shell=True)

        convert_command = """convert {0} -fill white -stroke white -draw "path 'M 0,143 l 99999,0 l 0,20 l -99999,0 '" {1} """.format(label_file, label_file)
        subprocess.call(convert_command, shell=True)

        # Add label
        edf_file = os.path.realpath(os.path.join(directories['final_focused'], object_name+"_edf.jpg"))
        zs_file = os.path.realpath(os.path.join(directories['stripped'], object_name, 'ZS.tif'))

        convert_command = "convert -append %s %s %s" % (zs_file, label_file, edf_file)
        subprocess.call(convert_command, shell=True)

        unlabeled_file = os.path.realpath(os.path.join(directories['unlabeled_focused'], object_name+".tif"))
        convert_command = "convert %s %s" % (zs_file, unlabeled_file)
        subprocess.call(convert_command, shell=True)
        # shutil.copyfile(zs_file, unlabeled_file)


def load_settings():

    filename = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'focus.cfg')

    parser = ConfigParser.SafeConfigParser(allow_no_value=True)
    parser.optionxform = str  # preserve case

    parser.read(filename)

    software = {}
    # set required variable
    software['name'] = parser.get('focus', 'software')

    if software['name'] not in ['zerene']:
        sys.exit('Unrecongized software. Available software: zerene')

    for setting in parser.options(software):
        software[setting] = str(parser.get(software, setting))

    return software


if __name__ == "__main__":

    debug = False
    if len(sys.argv) != 2:
        if len(sys.argv) == 3 and sys.argv[2] == "debug":
            debug = True

        else:
            print 'Use: focus <directory name>'
            print 'To preserve original files, use: focus <directory name> debug'
            sys.exit(0)

    # If that option isn't a directory name, quite:
    if not os.path.isdir(sys.argv[1]):
        print 'Argument to focus must be a directory name - quitting.'
        sys.exit(0)

    # Assign our target directory variable:
    directories['input'] = os.path.realpath(sys.argv[1])
    print 'Running Focus on ', directories['input']

    software = load_settings()

    focus(directories, software)
