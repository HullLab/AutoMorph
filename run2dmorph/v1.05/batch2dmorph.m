function batch2dmorph(directory,image_extension,sampleID,output_filename,microns_per_pixel_X,microns_per_pixel_Y,get_coordinates,save_intermediates,intensity_range_in,intensity_range_out,gamma,threshold_adjustment,smoothing_sigma,limit,write_csv,downsample,num_points)
%Output:
%   
%   FILES:
%   Outputs a comma-delimited file named 'sampleID_morph2d_properties.csv'
%   (or 'output_filename_morph2d_properties.csv' if output_filename is specified)
%   containing morphological properties specified in measuremorph.m for all
%   objects in the folder. Also outputs comma-delimited files named
%   'sampleID_coordinates_original.csv' and 'sampleID_coordinates_smoothed.csv'
%   (or 'output_filename_original_coordinates.csv' if output_filename is
%   specified, etc.) containing unsmoothed and smoothed coordinates for all
%   objects in the folder. A text file containing all parameter settings
%   named 'sampleID_objectID_parameters.csv' is also outputted. In addition, a
%   file named 'output_filename_skipped.txt' is generated, containing a list of
%   all image files in the folder that are either foram-less or require
%   further manual manipulation to obtain a credible outline. Finally, a
%   log file named 'output_filename_log.txt' is also outputted. All files
%   are written to a folder named 'morph2d' nested within the original
%   folder containing the image files.
%
%   NOTE: In general, write_csv should always be left as false (default), 
%   as a single csv file containing measures for all objects in the folder
%   will be generated using this function. If write_csv is set to true,
%   individual csv files will be generated for each object additionally.
%   The same behavior applies to the coordinate output files.
%   
%   All output files are saved to a directory named 'morph2d' nested in the
%   folder containing the image file(s).
%
%   VARIABLES:
%   final_table: a table containing the following morphometric properties
%   for all image files in a folder:
%       Area, Eccentricity, Perimeter, MinorAxisLength, MajorAxisLength
%
%Input Variables:
%
%   directory: a string specifying the path of the folder containing the image
%   files to be processed (e.g., '/Users/myuser/Desktop/focused').
%   (REQUIRED)
%
%   image_extension: a string specifying the extension of the image files
%   to be processed (e.g., '.tif','.jpg',etc.). (REQUIRED)
%
%   sampleID: a string specifying the sample ID number for the images being
%   processed. (REQUIRED)
%
%   output_filename: a string specifying filename for the .csv file
%   containing the morphological measures generated by this function.
%   (Default: 'sampleID_objectID')
%
%   get_coordinates: a boolean specifying whether coordinates for each
%   outline should be extracted (see extractcoordinates.m) (Default: true)
%
%   For explanation of remaining input variables, see extract2doutline.m
%   and measuremorph.m.

% Check number of arguments and set default values as necessary

narginchk(3,17);
if ~exist('output_filename','var') || isempty(output_filename), output_filename = sampleID; end
if ~exist('save_intermediates','var') || isempty(save_intermediates), save_intermediates = false; end
if ~exist('microns_per_pixel_X','var') || isempty(microns_per_pixel_X), microns_per_pixel_X = 1; end
if ~exist('microns_per_pixel_Y','var') || isempty(microns_per_pixel_Y), microns_per_pixel_Y = 1; end
if ~exist('get_coordinates','var') || isempty(get_coordinates), get_coordinates = true; end
if ~exist('intensity_range_in','var') || isempty(intensity_range_in), intensity_range_in = [0 0.2]; end
if ~exist('intensity_range_out','var') || isempty(intensity_range_out), intensity_range_out = [0 1]; end
if ~exist('gamma','var') || isempty(gamma), gamma = 2; end
if ~exist('threshold_adjustment','var') || isempty(threshold_adjustment), threshold_adjustment = 0; end
if ~exist('smoothing_sigma','var') || isempty(smoothing_sigma), smoothing_sigma = 7; end
if ~exist('limit','var') || isempty(limit), limit = 0.05; end
if ~exist('write_csv','var') || isempty(write_csv), write_csv = false; end
if ~exist('downsample','var') || isempty(downsample), downsample = true; end
if ~exist('num_points','var') || isempty(num_points), num_points = 100; end

% Change working directory to designed path
cd(directory);

% Make output directory if it doesn't exist
if ~exist('morph2d','dir'), mkdir('morph2d'); end
% Check current architecture and assign appropriate path
% dividor (solidus or reverse solidus)
architecture = computer;
if strcmp(computer,'MACI64') == 1 || strcmp(computer,'GLNXA64') == 1, path_divider = '/'; else path_divider = '\'; end

% Start log file
diary(strcat('morph2d',path_divider,output_filename,'_log.txt'));
diary on

% Print starting time and date
fprintf('Edge detection started: %s\n\n',datestr(now));

% Grab all files in folder with designated file extension
files = dir(strcat('*',image_extension));

% Initialize tables for storing morph properties and coordinates
final_table_morph = table();
final_table_coords_original = table();
final_table_coords_smoothed = table();

% Loop through all image files
skipped = [];
for file = files'
    % Square image
    original_image = imread(file.name);
    size_original_image = size(original_image);
    new_height = ceil(size_original_image(1) / microns_per_pixel_Y);
    new_width = ceil(size_original_image(2) / microns_per_pixel_X);
    new_image = imresize(original_image,[new_height,new_width]);
    
    fprintf('Extracting outline: %s\n',file.name)
    % Force image to RGB mode with three layers
    rgb_image = new_image(:,:,1:3);
    % Extract 2D outline
    [obj_final,obj_edge,obj_smooth,sampleID,objectID] = extract2doutline(rgb_image,file.name,sampleID,save_intermediates,intensity_range_in,intensity_range_out,gamma,threshold_adjustment,smoothing_sigma,limit); 
    % Determine if outline is discontinuous or non-existent (e.g., no foram
    % in source image), skip additional processing, and add it to list of
    % skipped images
    temp_perimeter_bumpy = regionprops(obj_edge,'Perimeter');
    temp_perimeter_smooth = regionprops(obj_smooth,'Perimeter');
    temp_area = regionprops(obj_final,'Area');
    if (length(temp_perimeter_bumpy) == 1) && (length(temp_perimeter_smooth) == 1) && (length(temp_area) == 1) && ~(max(obj_edge(:)) == 0)
        % Obtain morphological measurements
        temp_table = struct2table(measuremorph(obj_final,obj_edge,obj_smooth,sampleID,objectID,write_csv));
        % Append morphological measurements for current object to final table
        % of measurements
        final_table_morph = vertcat(final_table_morph,temp_table);
    	% Obtain coordinates if necessary
        if get_coordinates == true
            [final_table_original,final_table_smoothed] = extractcoordinates(obj_edge,obj_smooth,sampleID,objectID,downsample,num_points,write_csv);
            final_table_coords_original = vertcat(final_table_coords_original,final_table_original);
            final_table_coords_smoothed = vertcat(final_table_coords_smoothed,final_table_smoothed);
        end 
    else    
        skipped = [skipped file.name];
        fprintf('Skipped: %s\n',file.name)
        continue
    end
end

% Write final output files
    % Write final tables
    writetable(final_table_morph,strcat('morph2d',path_divider,output_filename,'_morph2d_properties.csv'));
    if get_coordinates == true
        writetable(final_table_coords_original,strcat('morph2d',path_divider,output_filename,'_coordinates_original.csv'));
        writetable(final_table_coords_smoothed,strcat('morph2d',path_divider,output_filename,'_coordinates_smoothed.csv'));
    end
    % Save parameter values
    parameters = {};
    parameters.intensity_range_in_low = intensity_range_in(1);
    parameters.intensity_range_in_high = intensity_range_in(2);
    parameters.intensity_range_out_low = intensity_range_out(1);
    parameters.intensity_range_out_high = intensity_range_out(2);
    parameters.gamma = gamma;
    parameters.threshold_adjustment = threshold_adjustment;
    parameters.smoothing_sigma = smoothing_sigma;
    parameters.microns_per_pixel_X = microns_per_pixel_X;
    parameters.microns_per_pixel_Y = microns_per_pixel_Y;
    if downsample == true, parameters.downsample = 'true'; else parameters.downsample = 'false'; end
    parameters.num_points = num_points;
    % Write parameter values to file
    writetable(struct2table(parameters),strcat('morph2d',path_divider,output_filename,'_parameters.csv'));
    % Write file containing names of skipped images if they exist, and copy images to
    % 'no_outline_extracted' folder
    if ~isempty(skipped)
        % Make 'no_outline_extracted' folder if it doesn't exist
        if ~exist('no_outline_extracted','dir'), mkdir('no_outline_extracted'); end
        % Prepare file names
        split = strsplit(skipped,'.tif');
        % Open file to which names of skipped images will be written
        skipped_file = fopen(strcat('morph2d/',output_filename,'_skipped.txt'),'w');
        % Loop through skipped files and 1) write names to file; and 2)
        % copy original image file to 'no_outline_extracted' folder
        for object = split(1:end-1)
            fprintf(skipped_file,'%s\n',object{1});
            copyfile(strcat(object{1},'.tif'),strcat('no_outline_extracted/',object{1},'.tif'));
        end
        fclose(skipped_file);
    end
    
% End logging
fprintf('\nEdge detection complete: %s\n',datestr(now));
diary off
end